####################################################
#                    README
####################################################
# DESCRIPTION
####################################################
# Make file to auto generate dashboard terraform with variabilized json files
####################################################
# USAGE
####################################################
# Critical variables unique to where you are: TERRAFORM_DIRECTORY and SERVICE_DIRECTORY

# Assumes 

SHELL=/bin/bash


# Suffix for json files that will be created
FILE_VERSION:=_v1

# The directory where you are building google module - this should be a sample deployment of your service - https://github.com/observeinc/content-eng-gcp-example - main branch
TERRAFORM_DIRECTORY:=/Users/arthur/content_eng/terraform-observe-google/service/cloudsql/example
# The local directory with module code - your json and dashboard terraform will be placed here
SERVICE_DIRECTORY:=Users/arthur/content_eng/terraform-observe-google/service/cloudsql

TEMPLATE_DASHBOARD_DIRECTORY:=/Users/arthur/content_eng/terraform-observe-google/service/cloudsql/template_dashboard

# File created that will become a part of service definition
PARAMETER_OUTPUT_FILE:=/$(SERVICE_DIRECTORY)/dashboards/parameters$(FILE_VERSION).json
PARAMETER_OUTPUT_FILE_TF_PATH:=$${path.module}/dashboards/parameters$(FILE_VERSION).json

# File created that will become a part of service definition
PARAMETER_VALUES_OUTPUT_FILE:=/$(SERVICE_DIRECTORY)/dashboards/parameterValues$(FILE_VERSION).json
PARAMETER_VALUES_OUTPUT_FILE_TF_PATH:=$${path.module}/dashboards/parameterValues$(FILE_VERSION).json

# File created that will become a part of service definition
STAGES_OUTPUT_FILE:=/$(SERVICE_DIRECTORY)/dashboards/stages$(FILE_VERSION).json
STAGES_OUTPUT_FILE_TF_PATH:=$${path.module}/dashboards/stages$(FILE_VERSION).json

# File created that will become a part of service definition
LAYOUT_OUTPUT_FILE:=/$(SERVICE_DIRECTORY)/dashboards/layout$(FILE_VERSION).json
LAYOUT_OUTPUT_FILE_TF_PATH:=$${path.module}/dashboards/layout$(FILE_VERSION).json

# Terraform file that will be created
DASHBOARD_FILE:=/$(SERVICE_DIRECTORY)/auto_dashboards.tf
# Directorcy it will be created in
DASHBOARD_DIR:=$(SERVICE_DIRECTORY)/dashboards

# Variables used in functions below
CLOUDSQL_DATASET_ID:=UNSET
CLOUDSQL_LOGS_DATASET_ID:=UNSET
CLOUDSQL_METRICS_DATASET_ID:=UNSET


all: datasets ids finish

datasets: get_template_dashboard parameters stages layout 

ids: replace_cloudsql_id replace_cloudsqllog_id replace_cloudsqlmetric_id

finish: resource_def build_dashboard

# Run this step by itself if you have no json files or outputs
create_data_state:
	rm -f $(DASHBOARD_FILE);
	cd $(TERRAFORM_DIRECTORY) \
	terraform apply -auto-approve; 

get_template_dashboard:
	rm -f $(DASHBOARD_FILE);

	cd $(TEMPLATE_DASHBOARD_DIRECTORY); \
	terraform apply -auto-approve; 


# Create json file based on output value
parameters:
	cd $(TEMPLATE_DASHBOARD_DIRECTORY); \
	terraform output -json parameters | jq -r '.' > $(PARAMETER_OUTPUT_FILE)_TEMP;
	cat $(PARAMETER_OUTPUT_FILE)_TEMP | jq -r '.' > $(PARAMETER_OUTPUT_FILE);
	rm $(PARAMETER_OUTPUT_FILE)_TEMP;

# Create json file based on output value
stages:
	cd $(TEMPLATE_DASHBOARD_DIRECTORY); \
	terraform output -json stages | jq -r '.' > $(STAGES_OUTPUT_FILE)_TEMP;
	cat $(STAGES_OUTPUT_FILE)_TEMP | jq -r '.' > $(STAGES_OUTPUT_FILE)
	rm $(STAGES_OUTPUT_FILE)_TEMP 

# Create json file based on output value
layout:
	cd $(TEMPLATE_DASHBOARD_DIRECTORY); \
	terraform output -json layout | jq -r '.' > $(LAYOUT_OUTPUT_FILE)_TEMP;
	cat $(LAYOUT_OUTPUT_FILE)_TEMP | jq -r '.' > $(LAYOUT_OUTPUT_FILE)
	rm $(LAYOUT_OUTPUT_FILE)_TEMP 

# Terraform resource template variable

define RESOURCE_DEF_VAR
	resource "observe_dashboard" "monitoring" {
		  	count = local.enable_metrics ? 1 : 0
			workspace = var.workspace.oid
			name      = "Cloud SQL Instance Monitoring Output"
			stages           = templatefile("$(STAGES_OUTPUT_FILE_TF_PATH)", {
				CLOUDSQL_DATASET = observe_dataset.cloudsql.id
				CLOUDSQL_METRICS_DATASET = local.enable_metrics == true ? observe_dataset.cloudsql_metrics[0].id: null
				CLOUDSQL_LOGS_DATASET = observe_dataset.sql_logs.id
			})
			layout           = templatefile("$(LAYOUT_OUTPUT_FILE_TF_PATH)", {
				CLOUDSQL_DATASET = observe_dataset.cloudsql.id
				CLOUDSQL_METRICS_DATASET = local.enable_metrics == true ? observe_dataset.cloudsql_metrics[0].id : null
				CLOUDSQL_LOGS_DATASET = observe_dataset.sql_logs.id
			})
			parameters       = templatefile("$(PARAMETER_OUTPUT_FILE_TF_PATH)", {
				CLOUDSQL_DATASET = observe_dataset.cloudsql.id
				CLOUDSQL_METRICS_DATASET = local.enable_metrics == true ? observe_dataset.cloudsql_metrics[0].id : null
				CLOUDSQL_LOGS_DATASET = observe_dataset.sql_logs.id
			})

			# parameter_values = templatefile("$${path.module}/$(PARAMETER_VALUES_OUTPUT_FILE)", {
			#
			#})
		}

endef

export RESOURCE_DEF_VAR 

# Create terraform file for dashboard
resource_def:
	@echo "$$RESOURCE_DEF_VAR" > $(DASHBOARD_FILE)
	cd /$(SERVICE_DIRECTORY); \
	terraform fmt;

# Apply terraform 
build_dashboard:
	cd $(TERRAFORM_DIRECTORY); \
	terraform apply -auto-approve;

replace_cloudsql_id:
	$(eval CLOUDSQL_DATASET_ID=$(shell cd $(TERRAFORM_DIRECTORY); terraform output -json cloudsql_datasets_id | jq -r '.cloudsql_dataset_id')) 
	echo CLOUDSQL_DATASET_ID is $(CLOUDSQL_DATASET_ID);
	sed -i '' "s:$(CLOUDSQL_DATASET_ID):"\$${CLOUDSQL_DATASET}":g" /$(DASHBOARD_DIR)/*; 

replace_cloudsqllog_id:
	$(eval CLOUDSQL_LOGS_DATASET_ID=$(shell cd $(TERRAFORM_DIRECTORY); terraform output -json cloudsql_datasets_id | jq -r '.cloudsql_logs_dataset_id')) 
	echo CLOUDSQL_LOGS_DATASET_ID is $(CLOUDSQL_LOGS_DATASET_ID);
	sed -i '' "s:$(CLOUDSQL_LOGS_DATASET_ID):"\$${CLOUDSQL_LOGS_DATASET}":g" /$(DASHBOARD_DIR)/*; 

replace_cloudsqlmetric_id:
	$(eval CLOUDSQL_METRICS_DATASET_ID=$(shell cd $(TERRAFORM_DIRECTORY); terraform output -json cloudsql_datasets_id | jq -r '.cloudsql_metrics_dataset_id'))
	echo CLOUDSQL_METRICS_DATASET_ID is $(CLOUDSQL_METRICS_DATASET_ID);
	sed -i '' "s:$(CLOUDSQL_METRICS_DATASET_ID):"\$${CLOUDSQL_METRICS_DATASET}":g" /$(DASHBOARD_DIR)/*; 