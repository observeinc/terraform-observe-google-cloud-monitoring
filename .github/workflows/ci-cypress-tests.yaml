name: Cypress Tests
run-name: Cypress - ${{ github.event_name }} by @${{ github.actor }}
concurrency: gcp-workflow-cypress
on: 
  workflow_dispatch:
  # push:
  #   branches:    
  #     - 'main'
  # pull_request:

  schedule:
    # only runs on default branch
    # * is a special character in YAML so you have to quote this string
    - cron:  '5 */12 * * *'

jobs:
  
  Enter-The-Matrix:
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    env:
      WORK_DIR: cypressTests

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      # if pr then checkout source branch
      - name: Checkout PR Head
        uses: actions/checkout@v3
        if: github.head_ref != ''
        with:
          ref: ${{ github.head_ref }}

      # Counts test files and creates an array of numbers as strings that will govern the number of runners used to run tests
      - id: set-matrix
        run: |
          echo "::set-output name=matrix::$(ls *.spec.ts | grep -v '01_GetDatasets.spec.ts' | jq -R -s -c 'split("\n")[:-1] | keys[]' | jq -R -s -c 'split("\n")[:-1]')"
        working-directory: "${{ env.WORK_DIR }}/gcp"

      - id: diagnostic-info
        run: |
          echo "Github Event Name= "
          echo "${{ toJson(github.event_name) }}"
          echo "Head Ref = ${{ github.head_ref }}"
          echo "Base Ref = ${{ github.base_ref }}"



  Run-Test-Build:
    needs: Enter-The-Matrix
    if: true 
    strategy:
      max-parallel: 30
      fail-fast: false
      # creates a machine for each test file
      matrix:
        test_file: ${{ fromJson(needs.Enter-The-Matrix.outputs.matrix) }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: write
      issues: read
      checks: write
    env:
      WORK_DIR: cypressTests

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      # if pr then checkout source branch
      - name: Checkout PR Head
        uses: actions/checkout@v3
        if: github.head_ref != ''
        with:
          ref: ${{ github.head_ref }}

      # GCP Login
      # This is key generated in GCP console for service account
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
        with:
          project_id: content-eng-testing-env
  
      - id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v1'
        with:
          secrets: |-
            CYPRESS_RECORD_KEY:content-eng-linux-host-test/TERRAFORM_OBSERVE_GOOGLE_CYPRESS_RECORD_KEY
            CYPRESS_PROJECT_ID:content-eng-linux-host-test/TERRAFORM_OBSERVE_GOOGLE_CYPRESS_PROJECT_ID
            OBSERVE_CLUSTER:content-eng-linux-host-test/TERRAFORM_OBSERVE_GOOGLE_OBSERVE_CLUSTER
            OBSERVE_BASE_DOMAIN:content-eng-linux-host-test/TERRAFORM_OBSERVE_GOOGLE_OBSERVE_BASE_DOMAIN
            OBSERVE_CUSTOMER_ID:content-eng-linux-host-test/TERRAFORM_OBSERVE_GOOGLE_OBSERVE_CUSTOMER_ID
            OBSERVE_WORKSPACE_ID:content-eng-linux-host-test/TERRAFORM_OBSERVE_GOOGLE_OBSERVE_WORKSPACE_ID
            OBSERVE_ADMIN_EMAIL:content-eng-linux-host-test/TERRAFORM_OBSERVE_GOOGLE_OBSERVE_ADMIN_EMAIL
            OBSERVE_ADMIN_PASSWORD:content-eng-linux-host-test/TERRAFORM_OBSERVE_GOOGLE_OBSERVE_ADMIN_PASSWORD
            OBSERVE_WRITER_EMAIL:content-eng-linux-host-test/TERRAFORM_OBSERVE_GOOGLE_OBSERVE_WRITER_EMAIL
            OBSERVE_WRITER_PASSWORD:content-eng-linux-host-test/TERRAFORM_OBSERVE_GOOGLE_OBSERVE_WRITER_PASSWORD
            OBSERVE_READER_EMAIL:content-eng-linux-host-test/TERRAFORM_OBSERVE_GOOGLE_OBSERVE_READER_EMAIL
            OBSERVE_READER_PASSWORD:content-eng-linux-host-test/TERRAFORM_OBSERVE_GOOGLE_OBSERVE_READER_PASSWORD
            ARTIFACT_REGISTRY:content-eng-linux-host-test/TERRAFORM_OBSERVE_GOOGLE_ARTIFACT_REGISTRY

      - name: Print Environment Variables - troubleshooting
        run: |
          env | sort -f

      # Check if image cache is present - change vars.IMAGE_CACHE_KEY to a different number when you want to cache a new image
      - name: Restore Cypress Image Cache if it exists
        id: cache-docker-cypress
        uses: actions/cache@v3
        with:
          path: ci/cache/docker/cypress
          key: cache-docker-cypress-latest-${{ vars.IMAGE_CACHE_KEY }}

      # if no cache then fetch image
      - name: Update Cypress Image Cache if cache miss
        if: steps.cache-docker-cypress.outputs.cache-hit != 'true'
        run: |
          echo "$GCP_CREDENTIALS" | base64 | docker login -u _json_key_base64 --password-stdin "https://$ARTIFACT_REGISTRY"

          docker pull $ARTIFACT_REGISTRY/cypress-tests:latest && mkdir -p ci/cache/docker/cypress && docker image save $ARTIFACT_REGISTRY/cypress-tests:latest --output ./ci/cache/docker/cypress/cypress-tests-latest.tar
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
          ARTIFACT_REGISTRY: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY }}
      # if cache exists then load image
      - name: Use Cypress Image Cache if cache hit
        if: steps.cache-docker-cypress.outputs.cache-hit == 'true'
        run: docker image load --input ./ci/cache/docker/cypress/cypress-tests-latest.tar

      # get data from graphql for datasets and dashboards
      - name: get data for cypress tests
        run: |
          # make dir for data
          mkdir -p gcp/data
          
          # switch to dir with code for data fetch
          cd dataFetch

          # Create node modules and fetch data
          yarn install

          # get data and save to files
          node getDatasets.js

          cd ../

          # copy git directory so cypress tests can use it for recording in cypress cloud
          cp -R ../.git .git

        working-directory: "${{ env.WORK_DIR }}"
        env:
          CYPRESS_RECORD_KEY: ${{ steps.secrets.outputs.CYPRESS_RECORD_KEY }}
          CYPRESS_PROJECT_ID: ${{ steps.secrets.outputs.CYPRESS_PROJECT_ID }}
          OBSERVE_CLUSTER: ${{ steps.secrets.outputs.OBSERVE_CLUSTER }}
          OBSERVE_BASE_DOMAIN: ${{ steps.secrets.outputs.OBSERVE_BASE_DOMAIN }}
          OBSERVE_CUSTOMER_ID: ${{ steps.secrets.outputs.OBSERVE_CUSTOMER_ID }}
          OBSERVE_WORKSPACE_ID: ${{ steps.secrets.outputs.OBSERVE_WORKSPACE_ID }}
          OBSERVE_ADMIN_EMAIL: ${{ steps.secrets.outputs.OBSERVE_ADMIN_EMAIL }}
          OBSERVE_ADMIN_PASSWORD: ${{ steps.secrets.outputs.OBSERVE_ADMIN_PASSWORD }}
          OBSERVE_WRITER_EMAIL: ${{ steps.secrets.outputs.OBSERVE_WRITER_EMAIL }}
          OBSERVE_WRITER_PASSWORD: ${{ steps.secrets.outputs.OBSERVE_WRITER_PASSWORD }}
          OBSERVE_READER_EMAIL: ${{ steps.secrets.outputs.OBSERVE_READER_EMAIL }}
          OBSERVE_READER_PASSWORD: ${{ steps.secrets.outputs.OBSERVE_READER_PASSWORD }}
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
          ARTIFACT_REGISTRY: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY }}

      - name: Tag Value
        run: |
          if ${{ github.event_name == 'schedule' }}; then
            echo "TAG_VALUE=Scheduled_Run_${OBSERVE_CUSTOMER_ID}.${OBSERVE_BASE_DOMAIN}" >> $GITHUB_ENV
          elif ${{ github.event_name == 'pull_request' }}; then
            echo "TAG_VALUE=PR_Run_${OBSERVE_CUSTOMER_ID}.${OBSERVE_BASE_DOMAIN}" >> $GITHUB_ENV
          else
            echo "TAG_VALUE=Main_Run_${OBSERVE_CUSTOMER_ID}.${OBSERVE_BASE_DOMAIN}" >> $GITHUB_ENV
          fi
        env:
          OBSERVE_BASE_DOMAIN: ${{ steps.secrets.outputs.OBSERVE_BASE_DOMAIN }}
          OBSERVE_CUSTOMER_ID: ${{ steps.secrets.outputs.OBSERVE_CUSTOMER_ID }}
      # Run tests - this uses cypress cloud parrallel function so it choses what tests to run on a given action runner
      - name: run cypress tests
        run: |
          docker-compose run cypress cy:run:record --spec "cypress/e2e/content-team/gcp/*.spec.ts" --browser=electron  --ci-build-id ${{ github.run_id }} --parallel --tag ${{ env.TAG_VALUE }}

        working-directory: "${{ env.WORK_DIR }}"
        env:
          CYPRESS_RECORD_KEY: ${{ steps.secrets.outputs.CYPRESS_RECORD_KEY }}
          CYPRESS_PROJECT_ID: ${{ steps.secrets.outputs.CYPRESS_PROJECT_ID }}
          OBSERVE_CLUSTER: ${{ steps.secrets.outputs.OBSERVE_CLUSTER }}
          OBSERVE_BASE_DOMAIN: ${{ steps.secrets.outputs.OBSERVE_BASE_DOMAIN }}
          OBSERVE_CUSTOMER_ID: ${{ steps.secrets.outputs.OBSERVE_CUSTOMER_ID }}
          OBSERVE_WORKSPACE_ID: ${{ steps.secrets.outputs.OBSERVE_WORKSPACE_ID }}
          OBSERVE_ADMIN_EMAIL: ${{ steps.secrets.outputs.OBSERVE_ADMIN_EMAIL }}
          OBSERVE_ADMIN_PASSWORD: ${{ steps.secrets.outputs.OBSERVE_ADMIN_PASSWORD }}
          OBSERVE_WRITER_EMAIL: ${{ steps.secrets.outputs.OBSERVE_WRITER_EMAIL }}
          OBSERVE_WRITER_PASSWORD: ${{ steps.secrets.outputs.OBSERVE_WRITER_PASSWORD }}
          OBSERVE_READER_EMAIL: ${{ steps.secrets.outputs.OBSERVE_READER_EMAIL }}
          OBSERVE_READER_PASSWORD: ${{ steps.secrets.outputs.OBSERVE_READER_PASSWORD }}
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
          ARTIFACT_REGISTRY: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY }}
